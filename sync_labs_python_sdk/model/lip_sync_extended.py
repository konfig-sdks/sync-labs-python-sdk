# coding: utf-8

"""
    Synchronize API

    Synchronize API allows you to lipsync a video to any audio in any language.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sync_labs_python_sdk import schemas  # noqa: F401


class LipSyncExtended(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "original_audio_url",
            "original_video_url",
            "credits_deducted",
            "id",
            "synergize",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            original_video_url = schemas.StrSchema
            original_audio_url = schemas.StrSchema
            status = schemas.StrSchema
            synergize = schemas.BoolSchema
            credits_deducted = schemas.NumberSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "original_video_url": original_video_url,
                "original_audio_url": original_audio_url,
                "status": status,
                "synergize": synergize,
                "credits_deducted": credits_deducted,
                "url": url,
            }
    
    original_audio_url: MetaOapg.properties.original_audio_url
    original_video_url: MetaOapg.properties.original_video_url
    credits_deducted: MetaOapg.properties.credits_deducted
    id: MetaOapg.properties.id
    synergize: MetaOapg.properties.synergize
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_video_url"]) -> MetaOapg.properties.original_video_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_audio_url"]) -> MetaOapg.properties.original_audio_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synergize"]) -> MetaOapg.properties.synergize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credits_deducted"]) -> MetaOapg.properties.credits_deducted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "original_video_url", "original_audio_url", "status", "synergize", "credits_deducted", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_video_url"]) -> MetaOapg.properties.original_video_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_audio_url"]) -> MetaOapg.properties.original_audio_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synergize"]) -> MetaOapg.properties.synergize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credits_deducted"]) -> MetaOapg.properties.credits_deducted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "original_video_url", "original_audio_url", "status", "synergize", "credits_deducted", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        original_audio_url: typing.Union[MetaOapg.properties.original_audio_url, str, ],
        original_video_url: typing.Union[MetaOapg.properties.original_video_url, str, ],
        credits_deducted: typing.Union[MetaOapg.properties.credits_deducted, decimal.Decimal, int, float, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        synergize: typing.Union[MetaOapg.properties.synergize, bool, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LipSyncExtended':
        return super().__new__(
            cls,
            *args,
            original_audio_url=original_audio_url,
            original_video_url=original_video_url,
            credits_deducted=credits_deducted,
            id=id,
            synergize=synergize,
            status=status,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
