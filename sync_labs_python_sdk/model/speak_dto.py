# coding: utf-8

"""
    Synchronize API

    Synchronize API allows you to lipsync a video to any audio in any language.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sync_labs_python_sdk import schemas  # noqa: F401


class SpeakDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "voiceId",
            "transcript",
        }
        
        class properties:
            transcript = schemas.StrSchema
            voiceId = schemas.StrSchema
            maxCredits = schemas.NumberSchema
            webhookUrl = schemas.StrSchema
            __annotations__ = {
                "transcript": transcript,
                "voiceId": voiceId,
                "maxCredits": maxCredits,
                "webhookUrl": webhookUrl,
            }
    
    voiceId: MetaOapg.properties.voiceId
    transcript: MetaOapg.properties.transcript
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voiceId"]) -> MetaOapg.properties.voiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxCredits"]) -> MetaOapg.properties.maxCredits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookUrl"]) -> MetaOapg.properties.webhookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transcript", "voiceId", "maxCredits", "webhookUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voiceId"]) -> MetaOapg.properties.voiceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxCredits"]) -> typing.Union[MetaOapg.properties.maxCredits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookUrl"]) -> typing.Union[MetaOapg.properties.webhookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transcript", "voiceId", "maxCredits", "webhookUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        voiceId: typing.Union[MetaOapg.properties.voiceId, str, ],
        transcript: typing.Union[MetaOapg.properties.transcript, str, ],
        maxCredits: typing.Union[MetaOapg.properties.maxCredits, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        webhookUrl: typing.Union[MetaOapg.properties.webhookUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpeakDto':
        return super().__new__(
            cls,
            *args,
            voiceId=voiceId,
            transcript=transcript,
            maxCredits=maxCredits,
            webhookUrl=webhookUrl,
            _configuration=_configuration,
            **kwargs,
        )
